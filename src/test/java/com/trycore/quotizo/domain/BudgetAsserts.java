package com.trycore.quotizo.domain;

import static com.trycore.quotizo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BudgetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetAllPropertiesEquals(Budget expected, Budget actual) {
        assertBudgetAutoGeneratedPropertiesEquals(expected, actual);
        assertBudgetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetAllUpdatablePropertiesEquals(Budget expected, Budget actual) {
        assertBudgetUpdatableFieldsEquals(expected, actual);
        assertBudgetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetAutoGeneratedPropertiesEquals(Budget expected, Budget actual) {
        assertThat(expected)
            .as("Verify Budget auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetUpdatableFieldsEquals(Budget expected, Budget actual) {
        assertThat(expected)
            .as("Verify Budget relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(
                e -> assertThat(e.getEstimatedDurationDays()).as("check estimatedDurationDays").isEqualTo(actual.getEstimatedDurationDays())
            )
            .satisfies(e -> assertThat(e.getDurationMonths()).as("check durationMonths").isEqualTo(actual.getDurationMonths()))
            .satisfies(
                e ->
                    assertThat(e.getMonthlyHours())
                        .as("check monthlyHours")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getMonthlyHours())
            )
            .satisfies(
                e ->
                    assertThat(e.getPlannedHours())
                        .as("check plannedHours")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPlannedHours())
            )
            .satisfies(e -> assertThat(e.getResourceCount()).as("check resourceCount").isEqualTo(actual.getResourceCount()))
            .satisfies(e -> assertThat(e.getIncome()).as("check income").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getIncome()))
            .satisfies(
                e ->
                    assertThat(e.getOtherTaxes())
                        .as("check otherTaxes")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOtherTaxes())
            )
            .satisfies(
                e -> assertThat(e.getDescriptionOtherTaxes()).as("check descriptionOtherTaxes").isEqualTo(actual.getDescriptionOtherTaxes())
            )
            .satisfies(
                e ->
                    assertThat(e.getWithholdingTaxes())
                        .as("check withholdingTaxes")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getWithholdingTaxes())
            )
            .satisfies(
                e ->
                    assertThat(e.getModAndCifCosts())
                        .as("check modAndCifCosts")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getModAndCifCosts())
            )
            .satisfies(
                e ->
                    assertThat(e.getGrossProfit())
                        .as("check grossProfit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGrossProfit())
            )
            .satisfies(
                e ->
                    assertThat(e.getGrossProfitPercentage())
                        .as("check grossProfitPercentage")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGrossProfitPercentage())
            )
            .satisfies(
                e ->
                    assertThat(e.getGrossProfitRule())
                        .as("check grossProfitRule")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGrossProfitRule())
            )
            .satisfies(
                e ->
                    assertThat(e.getAbsorbedFixedCosts())
                        .as("check absorbedFixedCosts")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAbsorbedFixedCosts())
            )
            .satisfies(
                e ->
                    assertThat(e.getOtherExpenses())
                        .as("check otherExpenses")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOtherExpenses())
            )
            .satisfies(
                e ->
                    assertThat(e.getProfitBeforeTax())
                        .as("check profitBeforeTax")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getProfitBeforeTax())
            )
            .satisfies(
                e ->
                    assertThat(e.getEstimatedTaxes())
                        .as("check estimatedTaxes")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getEstimatedTaxes())
            )
            .satisfies(
                e ->
                    assertThat(e.getEstimatedNetProfit())
                        .as("check estimatedNetProfit")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getEstimatedNetProfit())
            )
            .satisfies(
                e ->
                    assertThat(e.getNetMarginPercentage())
                        .as("check netMarginPercentage")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getNetMarginPercentage())
            )
            .satisfies(
                e ->
                    assertThat(e.getNetMarginRule())
                        .as("check netMarginRule")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getNetMarginRule())
            )
            .satisfies(
                e ->
                    assertThat(e.getCommissionToReceive())
                        .as("check commissionToReceive")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCommissionToReceive())
            )
            .satisfies(e -> assertThat(e.getNeedsApproval()).as("check needsApproval").isEqualTo(actual.getNeedsApproval()))
            .satisfies(e -> assertThat(e.getApprovalDecision()).as("check approvalDecision").isEqualTo(actual.getApprovalDecision()))
            .satisfies(e -> assertThat(e.getApprovalDate()).as("check approvalDate").isEqualTo(actual.getApprovalDate()))
            .satisfies(e -> assertThat(e.getApprovalTime()).as("check approvalTime").isEqualTo(actual.getApprovalTime()))
            .satisfies(e -> assertThat(e.getApprovalComments()).as("check approvalComments").isEqualTo(actual.getApprovalComments()))
            .satisfies(e -> assertThat(e.getApprovalStatus()).as("check approvalStatus").isEqualTo(actual.getApprovalStatus()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetUpdatableRelationshipsEquals(Budget expected, Budget actual) {
        assertThat(expected)
            .as("Verify Budget relationships")
            .satisfies(e -> assertThat(e.getContry()).as("check contry").isEqualTo(actual.getContry()))
            .satisfies(e -> assertThat(e.getUserAssignedTo()).as("check userAssignedTo").isEqualTo(actual.getUserAssignedTo()))
            .satisfies(e -> assertThat(e.getUserApprovedBy()).as("check userApprovedBy").isEqualTo(actual.getUserApprovedBy()))
            .satisfies(e -> assertThat(e.getUserOwner()).as("check userOwner").isEqualTo(actual.getUserOwner()))
            .satisfies(e -> assertThat(e.getAuthorizeds()).as("check authorizeds").isEqualTo(actual.getAuthorizeds()))
            .satisfies(e -> assertThat(e.getRoleAuthorizeds()).as("check roleAuthorizeds").isEqualTo(actual.getRoleAuthorizeds()));
    }
}
