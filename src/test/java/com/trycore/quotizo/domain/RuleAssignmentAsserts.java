package com.trycore.quotizo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RuleAssignmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRuleAssignmentAllPropertiesEquals(RuleAssignment expected, RuleAssignment actual) {
        assertRuleAssignmentAutoGeneratedPropertiesEquals(expected, actual);
        assertRuleAssignmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRuleAssignmentAllUpdatablePropertiesEquals(RuleAssignment expected, RuleAssignment actual) {
        assertRuleAssignmentUpdatableFieldsEquals(expected, actual);
        assertRuleAssignmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRuleAssignmentAutoGeneratedPropertiesEquals(RuleAssignment expected, RuleAssignment actual) {
        assertThat(expected)
            .as("Verify RuleAssignment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRuleAssignmentUpdatableFieldsEquals(RuleAssignment expected, RuleAssignment actual) {
        assertThat(expected)
            .as("Verify RuleAssignment relevant properties")
            .satisfies(e -> assertThat(e.getEntityName()).as("check entityName").isEqualTo(actual.getEntityName()))
            .satisfies(e -> assertThat(e.getEntityId()).as("check entityId").isEqualTo(actual.getEntityId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRuleAssignmentUpdatableRelationshipsEquals(RuleAssignment expected, RuleAssignment actual) {
        assertThat(expected)
            .as("Verify RuleAssignment relationships")
            .satisfies(e -> assertThat(e.getDroolsRuleFile()).as("check droolsRuleFile").isEqualTo(actual.getDroolsRuleFile()));
    }
}
