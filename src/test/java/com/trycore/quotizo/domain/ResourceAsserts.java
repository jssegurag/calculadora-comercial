package com.trycore.quotizo.domain;

import static com.trycore.quotizo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ResourceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceAllPropertiesEquals(Resource expected, Resource actual) {
        assertResourceAutoGeneratedPropertiesEquals(expected, actual);
        assertResourceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceAllUpdatablePropertiesEquals(Resource expected, Resource actual) {
        assertResourceUpdatableFieldsEquals(expected, actual);
        assertResourceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceAutoGeneratedPropertiesEquals(Resource expected, Resource actual) {
        assertThat(expected)
            .as("Verify Resource auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceUpdatableFieldsEquals(Resource expected, Resource actual) {
        assertThat(expected)
            .as("Verify Resource relevant properties")
            .satisfies(e -> assertThat(e.getSalary()).as("check salary").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getSalary()))
            .satisfies(
                e ->
                    assertThat(e.getHourlyRate())
                        .as("check hourlyRate")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getHourlyRate())
            )
            .satisfies(e -> assertThat(e.getActive()).as("check active").isEqualTo(actual.getActive()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceUpdatableRelationshipsEquals(Resource expected, Resource actual) {
        assertThat(expected)
            .as("Verify Resource relationships")
            .satisfies(e -> assertThat(e.getPosition()).as("check position").isEqualTo(actual.getPosition()));
    }
}
