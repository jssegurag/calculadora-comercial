package com.trycore.quotizo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserRoleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserRoleAllPropertiesEquals(UserRole expected, UserRole actual) {
        assertUserRoleAutoGeneratedPropertiesEquals(expected, actual);
        assertUserRoleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserRoleAllUpdatablePropertiesEquals(UserRole expected, UserRole actual) {
        assertUserRoleUpdatableFieldsEquals(expected, actual);
        assertUserRoleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserRoleAutoGeneratedPropertiesEquals(UserRole expected, UserRole actual) {
        assertThat(expected)
            .as("Verify UserRole auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserRoleUpdatableFieldsEquals(UserRole expected, UserRole actual) {
        assertThat(expected)
            .as("Verify UserRole relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserRoleUpdatableRelationshipsEquals(UserRole expected, UserRole actual) {
        assertThat(expected)
            .as("Verify UserRole relationships")
            .satisfies(e -> assertThat(e.getPermissions()).as("check permissions").isEqualTo(actual.getPermissions()))
            .satisfies(e -> assertThat(e.getBudgets()).as("check budgets").isEqualTo(actual.getBudgets()))
            .satisfies(
                e -> assertThat(e.getFinancialParameters()).as("check financialParameters").isEqualTo(actual.getFinancialParameters())
            )
            .satisfies(e -> assertThat(e.getUsers()).as("check users").isEqualTo(actual.getUsers()));
    }
}
