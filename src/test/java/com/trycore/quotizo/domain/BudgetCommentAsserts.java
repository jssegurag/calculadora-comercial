package com.trycore.quotizo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BudgetCommentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetCommentAllPropertiesEquals(BudgetComment expected, BudgetComment actual) {
        assertBudgetCommentAutoGeneratedPropertiesEquals(expected, actual);
        assertBudgetCommentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetCommentAllUpdatablePropertiesEquals(BudgetComment expected, BudgetComment actual) {
        assertBudgetCommentUpdatableFieldsEquals(expected, actual);
        assertBudgetCommentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetCommentAutoGeneratedPropertiesEquals(BudgetComment expected, BudgetComment actual) {
        assertThat(expected)
            .as("Verify BudgetComment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetCommentUpdatableFieldsEquals(BudgetComment expected, BudgetComment actual) {
        assertThat(expected)
            .as("Verify BudgetComment relevant properties")
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetCommentUpdatableRelationshipsEquals(BudgetComment expected, BudgetComment actual) {
        assertThat(expected)
            .as("Verify BudgetComment relationships")
            .satisfies(e -> assertThat(e.getBudget()).as("check budget").isEqualTo(actual.getBudget()));
    }
}
