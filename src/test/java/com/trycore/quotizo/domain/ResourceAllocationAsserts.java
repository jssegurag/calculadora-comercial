package com.trycore.quotizo.domain;

import static com.trycore.quotizo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ResourceAllocationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceAllocationAllPropertiesEquals(ResourceAllocation expected, ResourceAllocation actual) {
        assertResourceAllocationAutoGeneratedPropertiesEquals(expected, actual);
        assertResourceAllocationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceAllocationAllUpdatablePropertiesEquals(ResourceAllocation expected, ResourceAllocation actual) {
        assertResourceAllocationUpdatableFieldsEquals(expected, actual);
        assertResourceAllocationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceAllocationAutoGeneratedPropertiesEquals(ResourceAllocation expected, ResourceAllocation actual) {
        assertThat(expected)
            .as("Verify ResourceAllocation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceAllocationUpdatableFieldsEquals(ResourceAllocation expected, ResourceAllocation actual) {
        assertThat(expected)
            .as("Verify ResourceAllocation relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getAssignedHours())
                        .as("check assignedHours")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAssignedHours())
            )
            .satisfies(
                e ->
                    assertThat(e.getTotalCost()).as("check totalCost").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTotalCost())
            )
            .satisfies(e -> assertThat(e.getUnits()).as("check units").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getUnits()))
            .satisfies(
                e -> assertThat(e.getCapacity()).as("check capacity").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getCapacity())
            )
            .satisfies(
                e ->
                    assertThat(e.getPlannedHours())
                        .as("check plannedHours")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getPlannedHours())
            )
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertResourceAllocationUpdatableRelationshipsEquals(ResourceAllocation expected, ResourceAllocation actual) {
        assertThat(expected)
            .as("Verify ResourceAllocation relationships")
            .satisfies(e -> assertThat(e.getBudget()).as("check budget").isEqualTo(actual.getBudget()))
            .satisfies(e -> assertThat(e.getResource()).as("check resource").isEqualTo(actual.getResource()))
            .satisfies(e -> assertThat(e.getBudgetTemplate()).as("check budgetTemplate").isEqualTo(actual.getBudgetTemplate()));
    }
}
